generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProjectCategory {
  FULLSTACK
  FRONTEND
  BACKEND
  LANDING_PAGE
  API
}

enum UserRole {
  OWNER
}

enum Technology {
  HTML
  CSS
  Tailwind
  JavaScript
  TypeScript
  React
  NextJS
  Redux
  Zustand
  NodeJS
  Express
  NestJS
  JWT
  OAuth
  Bcrypt
  Zod
  MongoDB
  Mongoose
  PostgreSQL
  Prisma
  ShadcnUI
  FramerMotion
  AOS
  Git
  GitHub
  VSCode
  Postman
  Docker
  Vercel
  Netlify
  Render
  Railway
  Firebase
  AWS
  Jest
  ReactTestingLibrary
  WebSockets
  SocketIO
  RESTAPI
  GraphQL
}

enum SectionType {
  HERO
  ABOUT
  CONTACT
  FOOTER
}

enum SocialLinkTypes {
  GITHUB
  LINKEDIN
  TWITTER
  INSTAGRAM
  FACEBOOK
  YOUTUBE
  WEBSITE
  RESUME
  OTHER
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(OWNER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Blog      Blog[]

  @@map("user")
}

model Projects {
  id             String          @id @default(uuid())
  title          String
  tags           String[]
  category       ProjectCategory @default(FULLSTACK)
  demoUrl        String          @unique
  githubUrl      String          @unique
  projectContent String?

  isDeleted  Boolean @default(false)
  isFeatured Boolean @default(true)

  views  Int      @default(0)
  images String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("projects")
}

model SkillCategory {
  id     String  @id @default(uuid())
  label  String
  color  String?
  icon   String
  skills Skill[]

  @@map("skillCategories")
}

model Skill {
  id              String        @id @default(uuid())
  name            String
  skillCategoryId String
  skillCategory   SkillCategory @relation(fields: [skillCategoryId], references: [id], onDelete: Cascade)

  @@map("skills")
}

model Blog {
  id         String     @id @default(uuid())
  title      String
  slug       String     @unique
  content    String
  tags       String[]
  authorId   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  isDeleted  Boolean    @default(false)
  isPublish  Boolean    @default(false)
  technology Technology
  views      Int        @default(0)
  imageUrls  String[]
  author     User       @relation(fields: [authorId], references: [id])

  @@map("blogs")
}

model AboutMe {
  id        String      @id @default(uuid())
  section   SectionType @default(HERO)
  title     String?
  subTitle  String?
  bio       String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("about_me")
}

model Experience {
  id                  String    @id @default(uuid())
  position            String
  company             String
  description         String
  year                Int
  startDate           DateTime
  endDate             DateTime?
  isCurrent           Boolean   @default(false)
  technologies        String[]  @default([])
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  keyAchievements     String[]  @default([])
  keyResponsibilities String[]  @default([])

  @@map("experiences")
}

model ContactInfo {
  id String @id @default(uuid())

  fullName     String?
  profileImage String?
  resumeLink   String?

  email       String? @default("ranaot56@gmail.com")
  phoneNumber String? @default("+8801619830567")
  address     String? @default("Rajshahi, Bangladesh")
  location    String?

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  SocialLink SocialLink[]

  @@map("contact_info")
}

model SocialLink {
  id        String          @id @default(uuid())
  type      SocialLinkTypes
  url       String
  contactId String
  contact   ContactInfo     @relation(fields: [contactId], references: [id])

  @@unique([contactId, type])
  @@map("social_links")
}

model ContactMessage {
  id String @id @default(uuid())

  name      String
  email     String
  message   String
  createdAt DateTime @default(now())

  @@map("contactMessages")
}

model ProjectContactForm {
  id               String         @id @default(uuid())
  name             String
  email            String
  phone            String? // Optional
  company          String? // Optional
  position         String? // Optional
  projectType      ProjectType
  budget           BudgetRange
  timeline         Timeline
  message          String
  priority         PriorityLevel
  referralSource   ReferralSource
  newsletter       Boolean
  terms            Boolean
  projectDetails   String? // Optional
  preferredContact ContactMethod
  submittedAt      DateTime       @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([phone])
  @@map("projectContactForms")
}

model Visitor {
  id              String         @id @default(uuid())
  ipAddress       String
  country         String
  city            String
  deviceType      DeviceType     @default(Unknown)
  browser         String
  os              String
  visitCount      Int            @default(1)
  visitTime       DateTime
  timeSpent       Int // in minutes
  pagesVisited    String[] // store as text[]
  clickedLinks    String[] // store as text[]
  referrer        String
  isReturning     Boolean
  clickedProjects ProjectClick[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ipAddress])
  @@map("visitors")
}

model ProjectClick {
  id        String  @id @default(uuid())
  visitorId String
  visitor   Visitor @relation(fields: [visitorId], references: [id], onDelete: Cascade)

  projectId          String
  projectTitle       String
  clickType          ClickType
  timestamp          DateTime
  timeSpentOnProject Int // in seconds

  createdAt DateTime @default(now())
}

enum DeviceType {
  Desktop
  Mobile
  Tablet
  Unknown
}

enum ClickType {
  view
  live_demo
  github
  details
}

enum ProjectType {
  web_development
  mobile_app
  consulting
  other
}

enum BudgetRange {
  under_5k
  fiveK_15K
  fifteenK_30K
  thirtyK_50K
  fiftyK_plus
  lets_discuss
}

enum Timeline {
  asap
  oneMonth
  twoToThreeMonths
  threeToSixMonths
  flexible
}

enum PriorityLevel {
  low
  medium
  high
  urgent
}

enum ReferralSource {
  google
  linkedin
  github
  referral
  other
}

enum ContactMethod {
  email
  phone
  both
}
