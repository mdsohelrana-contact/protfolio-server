generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProjectCategory {
  FULLSTACK
  FRONTEND
  BACKEND
  LANDING_PAGE
  API
}

enum UserRole {
  OWNER
  ADMIN
  USER
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(OWNER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Blog      Blog[]

  @@map("user")
}

// Projects model
model Projects {
  id                    String          @id @default(uuid())
  title                 String
  description           String
  image                 String
  tags                  String[]
  category              ProjectCategory
  demoUrl               String          @unique
  githubUrl             String          @unique
  keyFeatures           String[]
  technicalDetails      String?
  challengesAndSolution String?
  isDeleted             Boolean         @default(false)
  isFeatured            Boolean         @default(true)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  @@map("projects")
}

// skills category model
model SkillCategory {
  id     String  @id @default(uuid())
  label  String
  icon   String
  color  String?
  skills Skill[]

  @@map("skillCategories")
}

// skills model
model Skill {
  id              String        @id @default(uuid())
  name            String
  skillCategoryId String
  skillCategory   SkillCategory @relation(fields: [skillCategoryId], references: [id], onDelete: Cascade)

  @@map("skills")
}

// blog model
model Blog {
  id        String   @id @default(uuid())
  title     String
  slug      String   @unique
  content   String
  imageUrl  String?
  tags      String[]
  authorId  String
  isDeleted Boolean  @default(false)
  isPublish Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blogs")
}

model AboutMe {
  id           String   @id @default(uuid())
  title        String
  bio          String
  profileImage String?
  resumeLink   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("aboutMe")
}

model Experience {
  id                  String    @id @default(uuid())
  position            String
  company             String
  description         String
  year                Int
  startDate           DateTime
  endDate             DateTime?
  isCurrent           Boolean   @default(false)
  technologies        String[]  @default([])
  keyAchievements     String[]  @default([])
  keyResponsibilities String[]  @default([])
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@map("experiences")
}

// Review model
// model Testimonial {
//   id        String   @id @default(uuid())
//   name      String
//   position  String
//   image     String
//   quote     String
//   rating    Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@map("testimonials")
// }

// contact information model 
model ContactInfo {
  id              String   @id @default(uuid())
  mobileNumber    String
  emailAddress    String
  gitHubProfile   String
  linkedInProfile String
  address         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("contactInfo")
}

// ContactMessage  model
model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())

  @@map("contactMessages")
}
